#include <bits/stdc++.h>

using namespace std;

void printArray(int A[], int length);
void generateArray(int A[], int length);
void bubleSort(int A[], int length);
void insertionSort(int A[], int length);
void generateAccending(int A[], int length);
void generateDecending(int A[], int length);

int main() {
    int n = 100000;
    int array[n];

    /// generating array
    //generateArray(array,n);
 //  generateAccending(array,n);
    generateDecending(array, n);

    //cout << "Before sorting: ";
    //printArray(array, n);

    cout<< "buble Sort:\n";
    clock_t start = clock();
    SelectionSort(array, n);
    clock_t stop = clock();

    long long clockdif = stop-start;
    double timeTaken = (double)clockdif / CLOCKS_PER_SEC;
    cout<<(fixed)<<setprecision(8)<<"Time taken = "<< timeTaken <<endl<<endl;

    cout<< "InsertionSort:\n";
    /// generating array
    //generateArray(array,n);
   // generateAccending(array,n);
     generateDecending(array, n);

    start = clock();
    insertionSort(array, n);
    stop = clock();

    clockdif = stop-start;
    timeTaken = (double)clockdif / CLOCKS_PER_SEC;
    cout<<(fixed)<<setprecision(8)<<"Time taken = "<< timeTaken <<endl;

    //cout << "After sorting:  ";
    //printArray(array, n);

    return 0;
}

void printArray(int A[], int length) {
    for (int i = 0; i < length; i++) {
        if (i != 0)
            cout << ", ";
        cout << A[i];
    }
    cout << endl;
}

void generateArray(int A[], int length) {
    srand(time(NULL));
    for(int i=0; i<length; i++)
        A[i]=rand()%100;
}

void bubleSort(int A[], int length) {
    for (int j = 0; j < length-1; j++) {
        for(int i=j+1; i<length-1; i++)
            if (A[i] > A[i+1])
                swap(A[i],A[i+1]);
    }
}

void insertionSort(int A[], int length) {
    for (int j = 1; j < length; j++) {
        int key = A[j];
        int i = j - 1;
        while (i > -1 && A[i] > key) {
            A[i + 1] = A[i];
            i = i - 1;
        }
        A[i + 1] = key;
    }
}
void generateAccending(int A[], int length){
    for(int i=0; i<length; i++)
        A[i]=i;
}
void generateDecending(int A[], int length){
    for(int i=length; i>=0; i--)
        A[i]=i;
}

/**
    On random, accending, decending order cases insertion sort is much faster than buble sort
**/


